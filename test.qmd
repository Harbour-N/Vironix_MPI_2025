---
title: Generating synthetic data
description: balalalbadldb
authors:
  - name: Nicholas Harbour
format: 
  html:
    embed-resources: true
    code-fold: true
    number-sections: true
    toc: true
    toc-depth: 3
    date: now
    date-modified: last-modified
    date-format: "MMMM DD, YYYY, HH:mm:ss"
jupyter: python3
---


Import required libraries
```{python}

import os
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"

import numpy as np
import matplotlib.pyplot as plt
import torch
from torch.utils.data import Dataset
from torchvision import datasets
from torchvision.transforms import ToTensor


```


# Load in MNIST dataset

```{python}


# Load MNIST training data
train_data = datasets.MNIST(
    root='MNIST_data',
    train=True,
    download=True,
    transform=ToTensor()
)


```

Plot some sample images from the dataset

```{python}

fig, axs = plt.subplots(2, 5, figsize=(10, 4))
for i in range(10):
    image, label = train_data[i]
    axs[i // 5, i % 5].imshow(image.squeeze(), cmap='gray')
    axs[i // 5, i % 5].set_title(f"Label: {label}")
    axs[i // 5, i % 5].axis('off')


plt.tight_layout()
plt.show()

```


# Simple GAN to generate synthetic MNIST data


```{python}

import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader

# Hyperparameters
latent_dim = 100
batch_size = 128
epochs = 20
lr = 0.0002
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# DataLoader
dataloader = DataLoader(train_data, batch_size=batch_size, shuffle=True)

```


```{python}

# Generator network
class Generator(nn.Module):
    def __init__(self):
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(latent_dim, 256),
            nn.LeakyReLU(0.2),
            nn.Linear(256, 512),
            nn.LeakyReLU(0.2),
            nn.Linear(512, 28 * 28),
            nn.Tanh()
        )

    def forward(self, z):
        return self.model(z).view(-1, 1, 28, 28)


# Discriminator network
class Discriminator(nn.Module):
    def __init__(self):
        super().__init__()
        self.model = nn.Sequential(
            nn.Flatten(),
            nn.Linear(28 * 28, 512),
            nn.LeakyReLU(0.2),
            nn.Linear(512, 1),
            nn.Sigmoid()
        )

    def forward(self, img):
        return self.model(img)


```



```{python}

# Initialize models
generator = Generator().to(device)
discriminator = Discriminator().to(device)

# Optimizers
optimizer_G = optim.Adam(generator.parameters(), lr=lr)
optimizer_D = optim.Adam(discriminator.parameters(), lr=lr)

# Loss
criterion = nn.BCELoss()

# Training
for epoch in range(epochs):
    for i, (real_imgs, _) in enumerate(dataloader):
        real_imgs = real_imgs.to(device)
        batch_size = real_imgs.size(0)

        # Ground truths
        valid = torch.ones(batch_size, 1, device=device)
        fake = torch.zeros(batch_size, 1, device=device)

        # ---------------------
        # Train Generator
        # ---------------------
        optimizer_G.zero_grad()

        z = torch.randn(batch_size, latent_dim, device=device)
        gen_imgs = generator(z)
        g_loss = criterion(discriminator(gen_imgs), valid)

        g_loss.backward()
        optimizer_G.step()

        # ---------------------
        # Train Discriminator
        # ---------------------
        optimizer_D.zero_grad()

        real_loss = criterion(discriminator(real_imgs), valid)
        fake_loss = criterion(discriminator(gen_imgs.detach()), fake)
        d_loss = real_loss + fake_loss

        d_loss.backward()
        optimizer_D.step()

    print(f"Epoch {epoch+1}/{epochs} | D loss: {d_loss.item():.4f} | G loss: {g_loss.item():.4f}")



```




```{python}

# Generate synthetic digits
generator.eval()
with torch.no_grad():
    z = torch.randn(10, latent_dim, device=device)
    fake_imgs = generator(z).cpu()

# Plot
fig, axs = plt.subplots(1, 10, figsize=(12, 2))
for i in range(10):
    axs[i].imshow(fake_imgs[i].squeeze(), cmap='gray')
    axs[i].axis('off')
plt.suptitle("Synthetic MNIST digits from Generator")

plt.tight_layout()
plt.show()



```